{"version":3,"sources":["DevList.js","restData.js","DevSearch.js","DevRepositories.js","DevDetails.js","DevBrow.js","serviceWorker.js","index.js"],"names":["DevList","user","List","Item","as","className","key","id","onClick","props","selectUser","active","this","selected","Image","avatar","src","avatar_url","Content","Header","login","searching","users","length","animated","selection","verticalAlign","size","map","renderUser","bind","content","online","Message","icon","header","React","Component","restData","query","total_count","incomplete_results","items","offlineUsers","fetch","encodeURIComponent","response","json","Promise","resolve","console","error","reject","filter","indexOf","repos_url","repos","offlineRepositories","repo","owner","DevSearch","state","current_search","search_timer","performSearch","prevProps","setState","clearTimeout","setTimeout","searchUser","then","Form","Field","Input","fluid","iconPosition","placeholder","loading","onChange","event","data","requestSearch","value","Checkbox","toggle","checked","label","setOnlineMode","Divider","DevRepositories","group","language","push","Label","image","Icon","name","Detail","license","spdx_id","watchers_count","stargazers_count","forks_count","Card","extra","Group","oc","fork","corner","color","href","html_url","target","rel","Meta","moment","created_at","format","Description","description","renderLabels","repositories","horizontal","itemsPerRow","renderRepo","Dimmer","Dimmable","dimmed","inverted","Loader","DevDetails","fetchDetails","getRepositories","bordered","floated","clearing","DevBrow","displayed_user","Container","Grid","stackable","padded","columns","Column","width","textAlign","attached","Segment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8dbf96a.chunk.js","sourcesContent":["import React from 'react';\nimport { List, Image, Message } from 'semantic-ui-react';\n\n\nclass DevList extends React.Component {\n    \n  renderUser(user) {\n    return (\n      <List.Item\n        as=\"li\"\n        className=\"item\"\n        key={ user.id }\n        onClick={ () => this.props.selectUser(user) }\n        active={ this.props.selected !== null && this.props.selected.id === user.id }\n      >\n        <Image avatar src={ user.avatar_url } />\n        <List.Content>\n          <List.Header>{ user.login }</List.Header>\n        </List.Content>\n      </List.Item>\n    );\n  }\n  \n  render() {\n    if (this.props.searching) {\n      // TODO : replace with a loader or a placeholder\n      return null;\n    } else if (this.props.users.length) {\n      // display users\n      return (\n        <List animated selection as=\"ol\" verticalAlign='middle' size=\"small\">\n          { this.props.users.map(this.renderUser.bind(this)) }\n        </List>\n      );\n    } else  {\n      // no user to display\n      let content = 'Please try a different search query' + (this.props.online ? '' : ' or go online');\n      return (\n        <Message\n          icon='id card outline'\n          header='Empty users list'\n          content={ content }\n        />\n      );\n    }\n  }\n\n}\n\nexport default DevList;","import offlineUsers from './data/users.json';\nimport offlineRepositories from './data/repositories.json';\n\nclass restData {\n  \n  static async searchUser(query, online = false) {\n    // No search query : display them all (offline) or none (online)\n    if (query === '') {\n      return online ? {\n        total_count: 0,\n        incomplete_results: false,\n        items: []\n      } : offlineUsers;\n    } \n    \n    if (online) {\n      try {\n        const response = await fetch(`https://api.github.com/search/users?q=${encodeURIComponent(query)}`);\n        const json = await response.json();\n        return Promise.resolve(json);\n      } catch (e) {\n        console.error(e);\n        return Promise.reject(e);\n      }\n    } else {\n      const users = offlineUsers.items.filter((user) => user.login.indexOf(query) !== -1);\n      // fake api\n      return Promise.resolve({\n        total_count: users.length,\n        incomplete_results: false,\n        items: users\n      });\n    }\n  }\n  \n  static async getRepositories(user, online = false) {\n    if (online) {\n      try {\n        const response = await fetch(user.repos_url);\n        const json = await response.json();\n        return Promise.resolve(json);\n      } catch (e) {\n        console.error(e);\n        return Promise.reject(e);\n      }\n    } else {\n      const repos = offlineRepositories.filter((repo) => repo.owner.id === user.id);\n      return Promise.resolve(repos);\n    }\n  }\n  \n}\n\nexport default restData;","import React from 'react';\nimport { Form, Divider, Input, Checkbox } from 'semantic-ui-react';\nimport DevList from './DevList';\nimport restData from './restData';\n\nconst KEY_TYPE_DELAY = 200;\n\nclass DevSearch extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      searching: false,\n      current_search: '',\n      users: []\n    };\n    // used in requestSearch function\n    this.search_timer = null;\n    // \n    this.performSearch();\n  }\n  \n  componentDidUpdate(prevProps) {\n    // load more data when the user has changed\n    if (this.props.online !== prevProps.online) {\n      this.setState({ searching: true });\n      this.performSearch();\n    }\n  }\n  \n  /*\n   * Request a search\n   * it uses a small delay in order not to fire a useless search\n   * in case a new search will be requested soon\n   * for instance between two key press when a word is being typed\n   */\n  requestSearch(query) {\n    // cancel a previous delay\n    if (this.search_timer !== null) {\n      clearTimeout(this.search_timer);\n    }\n    // set a delay\n    this.search_timer = setTimeout(() => {\n      // reset a delay having been reached\n      this.search_timer = null;\n      // actually perform the search\n      this.performSearch();\n    }, KEY_TYPE_DELAY);\n    \n    // still update the state\n    this.setState({\n      searching: true,\n      current_search: query\n    });\n  }\n  \n  /*\n   *  Perform an async search and update the state\n   */\n  performSearch() {\n    restData.searchUser(this.state.current_search, this.props.online)\n      .then((users) => {\n        this.setState({\n          users: users.items,\n          searching: false\n        });\n      });\n  }\n  \n  render() {\n    return (\n      <div>\n        <Form>\n          <Form.Field error={ !this.state.searching && this.state.current_search !== '' && this.state.users.length === 0 }>\n            <Input\n              fluid\n              icon='search'\n              iconPosition='left'\n              placeholder='Search …'\n              loading={ this.state.searching }\n              onChange={ (event, data) => this.requestSearch(data.value) }\n            />\n          </Form.Field>\n          <Form.Field>\n            <Checkbox \n              toggle\n              checked={ this.props.online }\n              label=\"Online mode\" \n              onClick={ () => this.props.setOnlineMode(!this.props.online) }\n            />\n          </Form.Field>\n        </Form>\n        <Divider />\n        <DevList \n          users={ this.state.users }\n          selected={ this.props.selected }\n          selectUser={ this.props.selectUser }\n          online={ this.props.online }\n          searching={ this.state.searching }\n        />\n      </div>\n    );\n  }\n  \n}\n\nexport default DevSearch;","import React from 'react';\nimport { Card, Header, Label, Icon, Dimmer, Loader } from 'semantic-ui-react';\nimport moment from 'moment';\n\nclass DevRepositories extends React.Component {\n\n  renderLabels(repo) {\n    let group = [];\n    \n    if (repo.language) {\n      group.push(\n        <Label image key=\"keyboard\">\n          <Icon name=\"keyboard\" />Language \n          <Label.Detail>{ repo.language }</Label.Detail>\n        </Label>\n      );\n    }\n    \n    if (repo.license !== null) {\n      group.push( \n        <Label image key=\"book\">\n          <Icon name=\"book\" />License \n          <Label.Detail>{ repo.license.spdx_id }</Label.Detail>\n        </Label>\n      );\n    }\n    \n    if (repo.watchers_count !== 0) {\n      group.push( \n        <Label image key=\"eye\">\n          <Icon name=\"eye\" />Watchers\n          <Label.Detail>{ repo.watchers_count }</Label.Detail>\n        </Label>\n      );\n    }\n  \n    if (repo.stargazers_count !== 0) {\n      group.push(\n        <Label image key=\"star\">\n          <Icon name=\"star\" />Stars \n          <Label.Detail>{ repo.stargazers_count }</Label.Detail>\n        </Label>\n      );\n    }\n  \n    if (repo.forks_count !== 0) {\n      group.push( \n        <Label image key=\"fork\">\n          <Icon name=\"fork\" />Forks \n          <Label.Detail>{ repo.forks_count }</Label.Detail>\n        </Label>\n      );\n    }\n    \n    // grouped labels\n    if (group.length) {\n      return (\n        <Card.Content extra>\n          <Label.Group size=\"tiny\">\n            { group }\n          </Label.Group>\n        </Card.Content>\n      )\n    } else {\n      return null;\n    }\n  }\n\n  renderRepo(repo) {\n    const oc = !repo.fork ? <Label corner=\"right\" size=\"mini\"><Icon name=\"star\" color=\"yellow\" /></Label> : null;\n    return (\n      <Card as=\"li\" key={ repo.id }>\n        { oc }\n        <Card.Content>\n          <Card.Header as=\"h3\">\n            <a href={ repo.html_url } target=\"_blank\" rel=\"noopener noreferrer\" >\n              { repo.name }\n            </a>\n          </Card.Header>\n          <Card.Meta>\n            <span className='date'>Since { moment(repo.created_at).format(\"MMMM YYYY\") }</span>\n          </Card.Meta>\n          <Card.Description>\n            { repo.description }\n          </Card.Description>\n        </Card.Content>\n        { this.renderLabels(repo) }\n      </Card>\n    ); \n  }\n\n  render() {\n    let content;\n    if (!this.props.loading || this.props.repositories.length !== 0) {\n      content = (\n        <div>\n          <Header as=\"h3\">\n            <Label horizontal as=\"span\">{ this.props.repositories.length }</Label>\n            Repositories\n          </Header>\n          <Card.Group as=\"ul\" itemsPerRow={3}>\n            { this.props.repositories.map(this.renderRepo.bind(this)) }\n          </Card.Group>\n        </div>\n      );\n    } else {\n      content = null;\n    }\n    \n    return (\n      <Dimmer.Dimmable as=\"div\" dimmed={ this.props.loading }>\n        <Dimmer inverted active={ this.props.loading }><Loader /></Dimmer>\n        { content }\n      </Dimmer.Dimmable>\n    );\n  }\n\n}\n\nexport default DevRepositories;\n","import React from 'react';\nimport { Header, Image, Divider, Message } from 'semantic-ui-react';\nimport DevRepositories from './DevRepositories';\nimport restData from './restData';\n\nclass DevDetails extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      repositories: [],\n      loading: false\n    };\n  }\n  \n  componentDidUpdate(prevProps) {\n    // load more data when the user has changed\n    if (this.props.user !== prevProps.user) {\n      this.fetchDetails();\n    }\n  }\n  \n  fetchDetails() {\n    restData.getRepositories(this.props.user, this.props.online)\n      .then((repositories) => {\n        this.setState({\n          repositories,\n          loading: false\n        });\n      });\n    this.setState({ \n      repositories: [],\n      loading: true\n    });\n  }\n  \n  render() {\n    if (this.props.user === null) {\n      return (\n        <Message\n          icon=\"question\"\n          header=\"No user to display\"\n          content=\"Please search for and select a user\"\n        />\n      )\n    } else {\n      return (\n        <div>\n          <Image \n            src={ this.props.user.avatar_url }\n            bordered\n            size=\"small\"\n            verticalAlign=\"top\"\n            floated=\"left\"\n          />\n          <Header as=\"h1\">\n            <Header.Content>\n              <a href={ this.props.user.html_url } target=\"_blank\" rel=\"noopener noreferrer\" >\n            { this.props.user.login }\n              </a>\n            </Header.Content>\n          </Header>\n          <Divider clearing />\n          <DevRepositories repositories={ this.state.repositories } loading={ this.state.loading }/>\n        </div>\n      );\n    }\n  }\n\n}\n\nexport default DevDetails;","import React from 'react';\nimport { Container, Grid, Header, Segment, Icon } from 'semantic-ui-react';\nimport DevSearch from './DevSearch';\nimport DevDetails from './DevDetails';\nimport 'semantic-ui-css/semantic.min.css';\nimport './tweak.css';\n\nclass DevBrow extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      displayed_user: null,\n      online: false\n    };\n  }\n  \n  selectUser(user) {\n    this.setState({\n      displayed_user: user\n    });\n  }\n  \n  setOnlineMode(online) {\n    this.setState({ online });\n  }\n  \n  render() {\n    return (\n      <Container as=\"section\" className=\"browser-container\">\n        <Grid stackable padded columns={2}>\n\n          <Grid.Column width={5} as=\"aside\" className=\"list-container\">\n            <Header as=\"h2\" textAlign=\"center\" attached=\"top\">\n              <Icon name=\"list\" />Users list\n            </Header>\n            <Segment attached>\n              <DevSearch \n                selected={ this.state.displayed_user }\n                selectUser={ this.selectUser.bind(this) }\n                online={ this.state.online }\n                setOnlineMode={ this.setOnlineMode.bind(this) }\n              />\n            </Segment>\n          </Grid.Column>\n\n          <Grid.Column width={11} as=\"article\" className=\"details-container\">\n            <Header as=\"h2\" textAlign=\"center\" attached=\"top\">\n              <Icon name=\"user\" />User details\n            </Header>\n            <Segment attached>\n              <DevDetails \n                user={ this.state.displayed_user }\n                online={ this.state.online }\n              />\n            </Segment>\n          </Grid.Column>\n\n        </Grid>\n      </Container>\n    );\n  }\n\n}\n\nexport default DevBrow;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DevBrow from './DevBrow';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DevBrow />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}